# This Makefile was adapted from the one shared
# here: https://stackoverflow.com/a/27025822

#----------------------------------------------------------------------------------------------------------------------
# Default target is 'library'
#----------------------------------------------------------------------------------------------------------------------
.DEFAULT_GOAL := library
#----------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------
# Try to build for Switch by default, unless otherwise specified
#----------------------------------------------------------------------------------------------------------------------
ifneq "$(PLATFORM)" "__LINUX__"
$(info Note: Building for default platform '__SWITCH__')
PLATFORM	:= __SWITCH__
endif
#----------------------------------------------------------------------------------------------------------------------

ifeq "$(PLATFORM)" "__SWITCH__"
#----------------------------------------------------------------------------------------------------------------------
# Check if DEVKITPRO exists in current environment
#----------------------------------------------------------------------------------------------------------------------
ifndef DEVKITPRO
$(error DEVKITPRO is not present in your environment. This can be fixed by sourcing switchvars.sh from /opt/devkitpro/)
endif
#----------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------
# Include switch build toolchain file
#----------------------------------------------------------------------------------------------------------------------
include $(DEVKITPRO)/libnx/switch_rules
#----------------------------------------------------------------------------------------------------------------------

ARCH		:=	-march=armv8-a -mtune=cortex-a57 -mtp=soft -fPIC -ftls-model=local-exec
endif

#----------------------------------------------------------------------------------------------------------------------
# Definition of variables used throughout the make process
# TARGET: Library name
# BUILD: Directory to store build files
# LIB: Directory to place final binary
# OUTPUT: Path to output to
# INCLUDE: Directory containing .hpp files
# SOURCE: Directory containing .cpp files
# DOCS_CONFIG: Path to doxygen config file
#----------------------------------------------------------------------------------------------------------------------
TARGET		:=  Aether
BUILD		:=	build
LIB			:=	lib
OUTPUT		:=	$(LIB)/lib$(TARGET).a
INCLUDE		:=	include
SOURCE		:=	source
DOCS_CONFIG	:=	Doxyfile
#----------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------
# Definition of code generation related variables
#----------------------------------------------------------------------------------------------------------------------
OBJDIR		:=	$(BUILD)/objs
DEPDIR		:=	$(BUILD)/deps
DEFINES		:=	-D$(PLATFORM)
ifeq "$(PLATFORM)" "__SWITCH__"
LIBDIRS		:=	$(PORTLIBS) $(LIBNX)
endif
INCLUDE		:=	$(foreach dir,$(LIBDIRS),-I$(dir)/include) -I$(INCLUDE)
CFLAGS		:=	-w -g -Wall -O3 -ffunction-sections -fdata-sections $(shell sdl2-config --cflags)\
				$(ARCH) $(INCLUDE) $(DEFINES)
CXXFLAGS	:=	$(CFLAGS) -fno-rtti -fno-exceptions -std=gnu++17
#----------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------
# Definition of variables which store file locations
#----------------------------------------------------------------------------------------------------------------------
CPPFILES 	:= $(shell find $(SOURCE)/ -name "*.cpp")
OBJS     	:= $(CPPFILES:$(SOURCE)/%.cpp=$(OBJDIR)/%.o)
DEPS     	:= $(CPPFILES:$(SOURCE)/%.cpp=$(DEPDIR)/%.d)
TREE     	:= $(sort $(patsubst %/,%,$(dir $(OBJS))))
#----------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------
# Include dependent files if they already exist
#----------------------------------------------------------------------------------------------------------------------
ifeq "$(MAKECMDGOALS)" ""
-include $(DEPS)
endif
#----------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------
# Define few virtual make targets
#----------------------------------------------------------------------------------------------------------------------
.PHONY: library install uninstall docs clean cleandocs
#----------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------
# Define target rule pre-requisites
#----------------------------------------------------------------------------------------------------------------------
library : $(OUTPUT)

.SECONDEXPANSION:
$(OBJDIR)/%.o: $(SOURCE)/%.cpp | $$(@D)
	@echo -n Compiling $*.o...
	@$(CXX) -MMD -MP -MF $(@:$(OBJDIR)/%.o=$(DEPDIR)/%.d) $(CXXFLAGS) -o $@ -c $<
	@echo Done!

install : library
$(OUTPUT) : $(OBJS)
#----------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------
# Define rule recipe `clean`
#----------------------------------------------------------------------------------------------------------------------
clean:
	@echo -n Cleaning build files...
	@rm -rf $(BUILD) $(LIB)
	@echo Done!
#----------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------
# Define rule recipe `cleandocs`
#----------------------------------------------------------------------------------------------------------------------
cleandocs:
	@echo -n Cleaning generated docs...
	@rm -rf docs
	@echo Done!
#----------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------
# Define rule recipe `install`
#----------------------------------------------------------------------------------------------------------------------
install:
	@echo -n Installing Aether headers...
	@mkdir -p $(PORTLIBS_PREFIX)/include/Aether/
	@cp -r $(INCLUDES)/Aether/* $(PORTLIBS_PREFIX)/include/Aether/
	@echo Done!
	@echo -n Installing Aether library file...
	@mkdir -p $(PORTLIBS_PREFIX)/lib/
	@cp $(OUTPUT) $(PORTLIBS_PREFIX)/lib/
	@echo Done!
#----------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------
# Define rule recipe `uninstall`
#----------------------------------------------------------------------------------------------------------------------
uninstall:
	@echo -n Removing Aether headers if present...
	@rm -rf $(PORTLIBS_PREFIX)/include/Aether/
	@echo Done!
	@echo -n Removing Aether library archive if present...
	@rm $(PORTLIBS_PREFIX)/lib/libAether.a
	@echo Done!
#----------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------
# Define rule recipe `$(OUTPUT)`
#----------------------------------------------------------------------------------------------------------------------
$(OUTPUT):
	@[ -d $(LIB) ] || mkdir -p $(LIB)
	@rm -rf $(OUTPUT)
	@echo -n Creating Aether library archive at $(OUTPUT)...
	@$(AR) -rc $(OUTPUT) $(OBJS)
	@echo Done!
#----------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------
# Define rule recipe `docs`
#----------------------------------------------------------------------------------------------------------------------
docs:
	@[ -d $@ ] || mkdir -p $@
	@echo -n Generating docs...
	@doxygen $(DOCS_CONFIG)
	@echo Done!
#----------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------
# Define rule recipe `$(TREE)` (creates directories for .o and .d files)
#----------------------------------------------------------------------------------------------------------------------
$(TREE): %:
	@mkdir -p $@
	@mkdir -p $(@:$(OBJDIR)%=$(DEPDIR)%)